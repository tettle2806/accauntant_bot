from aiogram import types, Router, F
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove

from tg_bot.database.transactions import select_user, get_family, insert_family, update_user, get_family_by_id
from tg_bot.keyboards.inline import accept_cancel
from tg_bot.keyboards.reply import family, un_family, back, main_menu
from tg_bot.states.family import FamilyCreate, FamilyStates

family_hand_router: Router = Router()


@family_hand_router.message(F.text == 'üë®üèª‚Äçüë©üèª‚Äçüëßüèª‚Äçüë¶üèª C–µ–º—å—è')
async def family_handler(message: types.Message):
    db_info = await select_user(message.from_user.id)
    print(db_info[0][5])
    if db_info[0][5]:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=family())
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=un_family())


@family_hand_router.message(F.text == '–°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é')
async def create_family(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º—å–∏', reply_markup=back())
    await state.set_state(FamilyCreate.family_name)


@family_hand_router.message(FamilyCreate.family_name)
async def save_name_of_family(message: types.Message, state:FSMContext):
    if message.text == '–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è':
        await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=main_menu())
        await state.clear()
    else:
        family_db = await get_family(message.text)
        if family_db is None:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Å–µ–º—å–∏')
            await state.update_data(name=message.text)
            await state.set_state(FamilyCreate.family_pass)
        else:
            await message.answer('–ò–º—è –∑–∞–Ω—è—Ç–æ, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è')
            await state.set_state(FamilyCreate.family_name)


@family_hand_router.message(FamilyCreate.family_pass)
async def save_password_of_family(message: types.Message, state:FSMContext):
    if message.text == '–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è':
        await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=main_menu())
        await state.clear()
    else:
        await state.update_data(password=message.text)
        information = await state.get_data()
        family_name = information["name"]
        family_password = information["password"]
        await insert_family(family_name, family_password)
        await state.clear()
        db_info = await get_family(family_name)
        await update_user(message.from_user.id, db_info[0][0])
        await message.answer(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n'
                             f'–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º—å–∏: {family_name}\n'
                             f'–ü–∞—Ä–æ–ª—å —Å–µ–º—å–∏: {family_password}\n',
                             reply_markup=family())


@family_hand_router.message(F.text=='–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è')
async def back_and_finish(message: types.Message, state:FSMContext):
    await state.clear()
    await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞',reply_markup=main_menu())

@family_hand_router.message(F.text=='–í—ã–π—Ç–∏ –∏–∑ —Å–µ–º—å–∏')
async def disconnect_family(message: types.Message):
    await message.answer('–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å —Å–µ–º—å—é',reply_markup=accept_cancel())

@family_hand_router.callback_query(F.data == 'yes')
async def accept(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–µ–º—å–∏', reply_markup=main_menu())
    await update_user(callback.from_user.id, None)

@family_hand_router.callback_query(F.data == 'no')
async def cancel(callback: types.CallbackQuery):
    await callback.message.delete()


@family_hand_router.message(F.text == '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –∫ —Å–µ–º—å–µ')
async def connect_family(message: types.Message, state:FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ–º—å–∏', reply_markup=back())
    await state.set_state(FamilyStates.family_name)


@family_hand_router.message(FamilyStates.family_name)
async def connect_to_family(message: types.Message, state:FSMContext):
    if message.text == '–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è':
        await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=main_menu())
        await state.clear()
    else:
        db_info = await get_family(message.text)
        if db_info is None:
            await message.answer('–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ–º—å—è, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ', reply_markup=back())
            await state.set_state(FamilyStates.family_name)
        else:
            await state.update_data(family_name=message.text)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å', reply_markup=back())
            await state.set_state(FamilyStates.family_pass)

@family_hand_router.message(FamilyStates.family_pass)
async def save_password(message: types.Message, state:FSMContext):
    if message.text == '–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è':
        await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=main_menu())
        await state.clear()
    else:
        await state.update_data(password=message.text)
        state_info = await state.get_data()
        db_info = await get_family(state_info['family_name'])
        family_name_db = db_info[0][1]
        family_password_db = db_info[0][2]
        if family_name_db == state_info['family_name'] and family_password_db == state_info['password']:
            await update_user(message.from_user.id, db_info[0][0])
            await message.answer(f'–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–µ–º—å–µ <b>{family_name_db}</b>',
                                 parse_mode=ParseMode.HTML,
                                 reply_markup=family())
            await state.clear()
        else:
            await message.answer('–ù–µ –≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup=back())
            await state.set_state(FamilyStates.family_pass)


@family_hand_router.message(F.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def back_to_menu(message:types.Message):
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_menu())


@family_hand_router.message(F.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def information_family(message:types.Message):
    user_id = message.from_user.id
    user_info = await select_user(user_id)
    if user_info is None:
        await message.answer('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')
    else:
        info = await get_family_by_id(user_info[0][5])

    family_name = info[0][1]
    family_password = info[0][2]
    family_balance = info[0][3]
    family_income = info[0][4]
    family_expenses = info[0][5]
    await message.answer(f'–ò–º—è —Å–µ–º—å–∏: {family_name}\n'
                         f'–ü–∞—Ä–æ–ª—å: {family_password}\n'
                         f'–ë–∞–ª–∞–Ω—Å: {family_balance}\n'
                         f'–î–æ—Ö–æ–¥—ã: {family_income}\n'
                         f'–†–∞—Å—Ö–æ–¥—ã: {family_expenses}')


